{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\Formulario\\\\Forms - Copia\\\\frontForms\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//import { Box, HStack, Input } from \"@chakra-ui/react\";\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [_id, setId] = useState(\"\");\n  const [informacao, setInformacao] = useState([]);\n  console.log(informacao);\n  useEffect(() => {\n    if (_id) {\n      obterInformacaoPorId(_id);\n    }\n  }, [_id]);\n  async function obterInformacaoPorId(id) {\n    try {\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\n      setInformacao(response.data);\n    } catch (error) {\n      // Tratar erros\n    }\n  }\n  const handleIdChange = event => {\n    setId(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: _id,\n        onChange: handleIdChange,\n        placeholder: \"Insira o _id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), informacao.map(info => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: info.pergunta\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 10\n        }, this)\n      }, info._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3zpBh7UF0U0fuOKPPlr2TOmzAuw=\");\n_c = App;\nexport default App;\n\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\nconsole.log(selectedId)\r\nconsole.log(posts)\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     <div >\r\n   \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((_id,questions,perguntas) => (\r\n            <div key={_id}  >\r\n             \r\n            <p>{questions}</p>\r\n              <p >{perguntas }</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n         </div>\r\n         \r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","_id","setId","informacao","setInformacao","console","log","obterInformacaoPorId","id","response","get","data","error","handleIdChange","event","target","value","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","info","pergunta","_c","$RefreshReg$"],"sources":["C:/Github/Formulario/Forms - Copia/frontForms/src/App.js"],"sourcesContent":["//import { Box, HStack, Input } from \"@chakra-ui/react\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n\r\nconst [_id, setId] = useState(\"\");\r\nconst [informacao, setInformacao] = useState([]);\r\nconsole.log(informacao)\r\n\r\nuseEffect(() => {\r\n  if (_id) {\r\n    obterInformacaoPorId(_id);\r\n  }\r\n}, [_id]);\r\n\r\nasync function obterInformacaoPorId(id) {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n    setInformacao(response.data);\r\n  } catch (error) {\r\n    // Tratar erros\r\n  }\r\n}\r\n\r\nconst handleIdChange = (event) => {\r\n  setId(event.target.value);\r\n};\r\n\r\n  \r\n  return (\r\n    <div>\r\n    \r\n         <div>\r\n      <input\r\n        type=\"text\"\r\n        value={_id}\r\n        onChange={handleIdChange}\r\n        placeholder=\"Insira o _id\"\r\n      />\r\n      {informacao.map((info) => (\r\n        <div key={info._id}>\r\n       \r\n         <h3>{info.pergunta}</h3>\r\n       \r\n        </div>\r\n      ))}\r\n    </div>\r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\nconsole.log(selectedId)\r\nconsole.log(posts)\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     <div >\r\n   \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((_id,questions,perguntas) => (\r\n            <div key={_id}  >\r\n             \r\n            <p>{questions}</p>\r\n              <p >{perguntas }</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n         </div>\r\n         \r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\r\n\r\n\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEf,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACjC,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChDU,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EAEvBT,SAAS,CAAC,MAAM;IACd,IAAIO,GAAG,EAAE;MACPM,oBAAoB,CAACN,GAAG,CAAC;IAC3B;EACF,CAAC,EAAE,CAACA,GAAG,CAAC,CAAC;EAET,eAAeM,oBAAoBA,CAACC,EAAE,EAAE;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAE,mCAAkCF,EAAG,EAAC,CAAC;MACzEJ,aAAa,CAACK,QAAQ,CAACE,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;IAAA;EAEJ;EAEA,MAAMC,cAAc,GAAIC,KAAK,IAAK;IAChCZ,KAAK,CAACY,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC3B,CAAC;EAGC,oBACElB,OAAA;IAAAmB,QAAA,eAEKnB,OAAA;MAAAmB,QAAA,gBACHnB,OAAA;QACEoB,IAAI,EAAC,MAAM;QACXF,KAAK,EAAEf,GAAI;QACXkB,QAAQ,EAAEN,cAAe;QACzBO,WAAW,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B,CAAC,EACDrB,UAAU,CAACsB,GAAG,CAAEC,IAAI,iBACnB5B,OAAA;QAAAmB,QAAA,eAECnB,OAAA;UAAAmB,QAAA,EAAKS,IAAI,CAACC;QAAQ;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC,GAFfE,IAAI,CAACzB,GAAG;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIb,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGV;AAACxB,EAAA,CA/CQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAiDZ,eAAeA,GAAG;;AAiBlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1EA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}