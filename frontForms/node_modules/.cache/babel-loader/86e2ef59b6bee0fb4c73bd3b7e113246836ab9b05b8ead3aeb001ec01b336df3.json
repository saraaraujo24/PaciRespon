{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\Formulario\\\\Forms - Copia\\\\frontForms\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Box, HStack, Input, List, ListItem } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [selectedId, setSelectedId] = useState(\"\");\n  const [resposta, setResposta] = useState('');\n  console.log(setResposta);\n  const [answers, setAnswers] = useState([]);\n  useEffect(() => {\n    if (selectedId) {\n      fetchQuestions(selectedId);\n    }\n  }, [selectedId]);\n  const fetchQuestions = async id => {\n    try {\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\n      setPosts(questionList.flat()); // Flatten nested arrays if necessary\n    } catch (error) {\n      // Handle errors here (e.g., display an error message)\n      console.error(\"Error fetching questions:\", error);\n    }\n  };\n  const handleIdChange = event => {\n    setSelectedId(event.target.value);\n  };\n  async function handleSubmit() {\n    try {\n      await axios.post('http://localhost:8005/response', {\n        resposta: answers\n      });\n      console.log('Respostas salvas com sucesso!');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  useEffect(() => {\n    // Initialize answers array with empty strings\n    setAnswers(posts.map(() => \"\"));\n  }, [posts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HStack, {\n      spacing: 8,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        w: \"100%\",\n        ml: \"5%\",\n        mt: \"5%\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          className: \"wrap-input\",\n          id: \"cpfInput\",\n          value: selectedId,\n          onChange: handleIdChange,\n          placeholder: \"Enter _id to fetch data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), posts.length > 0 ? /*#__PURE__*/_jsxDEV(List, {\n      spacing: 3,\n      children: [posts.map((question, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [question, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"space\",\n          type: \"text\",\n          placeholder: \"Digite sua resposta...\",\n          value: answers[index] || '' // Access answer for this index\n          ,\n          onChange: e => setAnswers(prevAnswers => [...prevAnswers, e.target.value])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 14\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      textAlign: \"center\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vPXIdoMHPLCo2jvLg37Z1DD7wMI=\");\n_c = App;\nexport default App;\n\n/*import { Box, HStack, Input, List, ListItem } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  const [resposta, setResposta] = useState('');\r\n   console.log(resposta)\r\n  \r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      fetchQuestions(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const fetchQuestions = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList.flat()); // Flatten nested arrays if necessary\r\n    } catch (error) {\r\n      // Handle errors here (e.g., display an error message)\r\n      console.error(\"Error fetching questions:\", error);\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n  };\r\n\r\n\r\n\r\n\r\n  async function handleSubmit() {\r\n \r\n    const response = resposta\r\n  try{\r\n    await axios.post('http://localhost:8005/response', {  \r\n      resposta:response,\r\n    });\r\n      console.log('Respostas salvas com sucesso!');\r\n \r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <HStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedId}\r\n            onChange={handleIdChange}\r\n            placeholder=\"Enter _id to fetch data\"\r\n          />\r\n        </Box>\r\n      </HStack>\r\n\r\n      {posts.length > 0 ? (\r\n        <List spacing={3}>\r\n          {posts.map((question, index) => (\r\n            <ListItem key={index}>{question}<br></br>\r\n             <input\r\n                className=\"space\"\r\n                type=\"text\"\r\n                placeholder=\"Digite sua resposta...\"\r\n                onChange={e =>setResposta(e.target.value)}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n          <button onClick={handleSubmit} >Enviar</button>\r\n        </List>\r\n      ) : (\r\n      \r\n        <Box textAlign=\"center\">Loading...</Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Box","HStack","Input","List","ListItem","React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","posts","setPosts","selectedId","setSelectedId","resposta","setResposta","console","log","answers","setAnswers","fetchQuestions","id","response","get","questionList","data","map","post","selectedQuestions","question","pergunta","flat","error","handleIdChange","event","target","value","handleSubmit","children","spacing","w","ml","mt","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","length","index","type","e","prevAnswers","onClick","textAlign","_c","$RefreshReg$"],"sources":["C:/Github/Formulario/Forms - Copia/frontForms/src/App.js"],"sourcesContent":["import { Box, HStack, Input, List, ListItem } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  const [resposta, setResposta] = useState('');\r\n   console.log(setResposta)\r\n   const [answers, setAnswers] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      fetchQuestions(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const fetchQuestions = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList.flat()); // Flatten nested arrays if necessary\r\n    } catch (error) {\r\n      // Handle errors here (e.g., display an error message)\r\n      console.error(\"Error fetching questions:\", error);\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n  };\r\n\r\n\r\n\r\n\r\n  async function handleSubmit() {\r\n \r\n    \r\n  try{\r\n    await axios.post('http://localhost:8005/response', {  \r\n      resposta: answers,\r\n    });\r\n      console.log('Respostas salvas com sucesso!');\r\n \r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Initialize answers array with empty strings\r\n    setAnswers(posts.map(() => \"\"));\r\n  }, [posts]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <HStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedId}\r\n            onChange={handleIdChange}\r\n            placeholder=\"Enter _id to fetch data\"\r\n          />\r\n        </Box>\r\n      </HStack>\r\n\r\n      {posts.length > 0 ? (\r\n        <List spacing={3}>\r\n          {posts.map((question, index) => (\r\n            <ListItem key={index}>{question}<br></br>\r\n             <input\r\n                className=\"space\"\r\n                type=\"text\"\r\n                placeholder=\"Digite sua resposta...\"\r\n                value={answers[index] || ''} // Access answer for this index\r\n                onChange={(e) => setAnswers\r\n                 ((prevAnswers) => [...prevAnswers, e.target.value])} \r\n              />\r\n            </ListItem>\r\n          ))}\r\n          <button onClick={handleSubmit} >Enviar</button>\r\n        </List>\r\n      ) : (\r\n      \r\n        <Box textAlign=\"center\">Loading...</Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n/*import { Box, HStack, Input, List, ListItem } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  const [resposta, setResposta] = useState('');\r\n   console.log(resposta)\r\n  \r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      fetchQuestions(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const fetchQuestions = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList.flat()); // Flatten nested arrays if necessary\r\n    } catch (error) {\r\n      // Handle errors here (e.g., display an error message)\r\n      console.error(\"Error fetching questions:\", error);\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n  };\r\n\r\n\r\n\r\n\r\n  async function handleSubmit() {\r\n \r\n    const response = resposta\r\n  try{\r\n    await axios.post('http://localhost:8005/response', {  \r\n      resposta:response,\r\n    });\r\n      console.log('Respostas salvas com sucesso!');\r\n \r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <HStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedId}\r\n            onChange={handleIdChange}\r\n            placeholder=\"Enter _id to fetch data\"\r\n          />\r\n        </Box>\r\n      </HStack>\r\n\r\n      {posts.length > 0 ? (\r\n        <List spacing={3}>\r\n          {posts.map((question, index) => (\r\n            <ListItem key={index}>{question}<br></br>\r\n             <input\r\n                className=\"space\"\r\n                type=\"text\"\r\n                placeholder=\"Digite sua resposta...\"\r\n                onChange={e =>setResposta(e.target.value)}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n          <button onClick={handleSubmit} >Enviar</button>\r\n        </List>\r\n      ) : (\r\n      \r\n        <Box textAlign=\"center\">Loading...</Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;*/\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}