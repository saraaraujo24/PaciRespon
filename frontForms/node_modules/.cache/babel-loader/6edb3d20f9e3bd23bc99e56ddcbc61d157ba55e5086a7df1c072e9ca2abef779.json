{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\Formulario\\\\Forms - Copia\\\\frontForms\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  console.log(posts)\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/questions/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     \r\n        <div className=\"perguntas\">\r\n        {posts.map((questionArray, index) => (\r\n          <div key={index}>\r\n            <h2>Pergunta {index + 1}:</h2>\r\n            <p>{questionArray[0]}</p> </div>\r\n        ))}\r\n      </div>\r\n\r\n     \r\n    </div>\r\n        \r\n  );\r\n}\r\n\r\nexport default App;*/\nimport { Box, HStack, Input } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedCpf, setSelectedCpf] = useState(\"\");\n  console.log(selectedCpf);\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    if (selectedCpf) {\n      getUserByCpf(selectedCpf);\n    }\n  }, [selectedCpf]);\n  const getUserByCpf = async cpf => {\n    try {\n      const response = await axios.get(`http://localhost:8005/questions/${cpf}`); // Adjust endpoint\n      const allQuestions = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\n      const filteredQuestions = allQuestions.filter(questionArray => questionArray[0].includes(cpf)); // Assuming perguntas include CPF\n      setPosts(filteredQuestions);\n      console.log(filteredQuestions);\n    } catch (error) {\n      // Handle errors\n    }\n  };\n  const handleCpfChange = event => {\n    setSelectedCpf(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HStack, {\n      spacing: 8,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        w: \"100%\",\n        ml: \"5%\",\n        mt: \"5%\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          className: \"wrap-input\",\n          id: \"cpfInput\",\n          value: selectedCpf,\n          onChange: handleCpfChange,\n          placeholder: \"Enter CPF to fetch questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"perguntas\",\n      children: posts.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Pergunta \", index + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ymfL+FzgEN6SaORI0N8GS/vNX7M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Box","HStack","Input","React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","selectedCpf","setSelectedCpf","console","log","posts","setPosts","getUserByCpf","cpf","response","get","allQuestions","data","map","post","selectedQuestions","question","pergunta","filteredQuestions","filter","questionArray","includes","error","handleCpfChange","event","target","value","children","spacing","w","ml","mt","className","id","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["C:/Github/Formulario/Forms - Copia/frontForms/src/App.js"],"sourcesContent":["/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  console.log(posts)\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/questions/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     \r\n        <div className=\"perguntas\">\r\n        {posts.map((questionArray, index) => (\r\n          <div key={index}>\r\n            <h2>Pergunta {index + 1}:</h2>\r\n            <p>{questionArray[0]}</p> </div>\r\n        ))}\r\n      </div>\r\n\r\n     \r\n    </div>\r\n        \r\n  );\r\n}\r\n\r\nexport default App;*/\r\nimport { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [selectedCpf, setSelectedCpf] = useState(\"\");\r\n  console.log(selectedCpf)\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (selectedCpf) {\r\n      getUserByCpf(selectedCpf);\r\n    }\r\n  }, [selectedCpf]);\r\n\r\n  const getUserByCpf = async (cpf) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/questions/${cpf}`); // Adjust endpoint\r\n      const allQuestions = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      const filteredQuestions = allQuestions.filter(questionArray => questionArray[0].includes(cpf)); // Assuming perguntas include CPF\r\n      setPosts(filteredQuestions);\r\n      console.log(filteredQuestions)\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n  const handleCpfChange = (event) => {\r\n    setSelectedCpf(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <HStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedCpf}\r\n            onChange={handleCpfChange}\r\n            placeholder=\"Enter CPF to fetch questions\"\r\n          />\r\n        </Box>\r\n      </HStack>\r\n  \r\n      <div className=\"perguntas\">\r\n        {posts.map((question, index) => (\r\n          <div key={index}>\r\n            <h2>Pergunta {index + 1}:</h2>\r\n            <p>{question}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}  \r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}