{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\Formulario\\\\Forms - Copia\\\\frontForms\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Box, HStack, Input, List, ListItem } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [selectedId, setSelectedId] = useState(\"\");\n  const [resposta, setResposta] = useState('');\n  console.log(setResposta);\n  useEffect(() => {\n    if (selectedId) {\n      fetchQuestions(selectedId);\n    }\n  }, [selectedId]);\n  const fetchQuestions = async id => {\n    try {\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\n      setPosts(questionList.flat()); // Flatten nested arrays if necessary\n    } catch (error) {\n      // Handle errors here (e.g., display an error message)\n      console.error(\"Error fetching questions:\", error);\n    }\n  };\n  const handleIdChange = event => {\n    setSelectedId(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HStack, {\n      spacing: 8,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        w: \"100%\",\n        ml: \"5%\",\n        mt: \"5%\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          className: \"wrap-input\",\n          id: \"cpfInput\",\n          value: selectedId,\n          onChange: handleIdChange,\n          placeholder: \"Enter _id to fetch data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), posts.length > 0 ? /*#__PURE__*/_jsxDEV(List, {\n      spacing: 3,\n      children: posts.map((question, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [question, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"space\",\n          type: \"text\",\n          placeholder: \"Digite sua resposta...\",\n          value: resposta\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      textAlign: \"center\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zrRpqoMHkF6utpeJorZnYzJx7i0=\");\n_c = App;\nexport default App;\n\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\nconsole.log(selectedId)\r\nconsole.log(posts)\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n    \r\n         <ul>\r\n      { posts.map( (post) => <li key={post}>{ post }</li>) }\r\n    </ul>\r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\n\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\nconsole.log(selectedId)\r\nconsole.log(posts)\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     <div >\r\n   \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((_id,questions,perguntas) => (\r\n            <div key={_id}  >\r\n             \r\n            <p>{questions}</p>\r\n              <p >{perguntas }</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n         </div>\r\n         \r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Box","HStack","Input","List","ListItem","React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","posts","setPosts","selectedId","setSelectedId","resposta","setResposta","console","log","fetchQuestions","id","response","get","questionList","data","map","post","selectedQuestions","question","pergunta","flat","error","handleIdChange","event","target","value","children","spacing","w","ml","mt","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","length","index","type","textAlign","_c","$RefreshReg$"],"sources":["C:/Github/Formulario/Forms - Copia/frontForms/src/App.js"],"sourcesContent":["import { Box, HStack, Input, List, ListItem } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  const [resposta, setResposta] = useState('');\r\n  console.log(setResposta)\r\n\r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      fetchQuestions(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const fetchQuestions = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList.flat()); // Flatten nested arrays if necessary\r\n    } catch (error) {\r\n      // Handle errors here (e.g., display an error message)\r\n      console.error(\"Error fetching questions:\", error);\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <HStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedId}\r\n            onChange={handleIdChange}\r\n            placeholder=\"Enter _id to fetch data\"\r\n          />\r\n        </Box>\r\n      </HStack>\r\n\r\n      {posts.length > 0 ? (\r\n        <List spacing={3}>\r\n          {posts.map((question, index) => (\r\n            <ListItem key={index}>{question}<br></br>\r\n              <input\r\n                className=\"space\"\r\n                type=\"text\"\r\n                placeholder=\"Digite sua resposta...\"\r\n                value={resposta}\r\n              />\r\n            <button>Enviar</button>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      ) : (\r\n      \r\n        <Box textAlign=\"center\">Loading...</Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\nconsole.log(selectedId)\r\nconsole.log(posts)\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n    \r\n         <ul>\r\n      { posts.map( (post) => <li key={post}>{ post }</li>) }\r\n    </ul>\r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\nconsole.log(selectedId)\r\nconsole.log(posts)\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     <div >\r\n   \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((_id,questions,perguntas) => (\r\n            <div key={_id}  >\r\n             \r\n            <p>{questions}</p>\r\n              <p >{perguntas }</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n         </div>\r\n         \r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\r\n\r\n\r\n"],"mappings":"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AA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACrC,EAAA,CA7DQD,GAAG;AAAA2C,EAAA,GAAH3C,GAAG;AA+DZ,eAAeA,GAAG;;AAMlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1EA,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}