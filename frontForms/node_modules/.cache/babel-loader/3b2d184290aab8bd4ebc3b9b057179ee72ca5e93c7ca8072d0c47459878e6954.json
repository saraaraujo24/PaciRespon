{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\Formulario\\\\Forms - Copia\\\\frontForms\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//import { Box, HStack, Input } from \"@chakra-ui/react\";\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [_id, setId] = useState(\"\");\n  const [informacao, setInformacao] = useState([]);\n  const [questionsList, setQuestionsList] = useState([]);\n  const [questionsLists, setQuestionsLists] = useState([]);\n  console.log(questionsLists);\n  const [extractedQuestions, setExtractedQuestions] = useState();\n  console.log(setExtractedQuestions);\n  useEffect(() => {\n    setQuestionsLists(extractedQuestions); // Update state\n  }, [informacao, _id]);\n  async function obterInformacaoPorId(id) {\n    try {\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\n      setInformacao(response.data);\n    } catch (error) {\n      // Handle errors\n    }\n  }\n  const handleIdChange = event => {\n    setId(event.target.value);\n  };\n  useEffect(() => {\n    if (informacao.length > 0) {\n      var _informacao$find, _informacao$find$sele;\n      const extractedQuestions = (_informacao$find = informacao.find(info => info._id === _id)) === null || _informacao$find === void 0 ? void 0 : (_informacao$find$sele = _informacao$find.selectedQuestions) === null || _informacao$find$sele === void 0 ? void 0 : _informacao$find$sele.map(question => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: question.pergunta\n      }, question.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this) // Key prop added here!\n      );\n      setQuestionsList(extractedQuestions);\n    }\n  }, [informacao, _id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: _id,\n      onChange: handleIdChange,\n      placeholder: \"Insira o _id\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), questionsList.length > 0 &&\n    /*#__PURE__*/\n    // Render questions only if available\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Perguntas encontradas para o CPF :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), questionsList.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.questionsList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, _id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nFESJAd2pflE9M6kgmWzqy6f6Ws=\");\n_c = App;\nexport default App;\n\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\nconsole.log(selectedId)\r\nconsole.log(posts)\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     <div >\r\n   \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((_id,questions,perguntas) => (\r\n            <div key={_id}  >\r\n             \r\n            <p>{questions}</p>\r\n              <p >{perguntas }</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n         </div>\r\n         \r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","_id","setId","informacao","setInformacao","questionsList","setQuestionsList","questionsLists","setQuestionsLists","console","log","extractedQuestions","setExtractedQuestions","obterInformacaoPorId","id","response","get","data","error","handleIdChange","event","target","value","length","_informacao$find","_informacao$find$sele","find","info","selectedQuestions","map","question","children","pergunta","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","post","_c","$RefreshReg$"],"sources":["C:/Github/Formulario/Forms - Copia/frontForms/src/App.js"],"sourcesContent":["//import { Box, HStack, Input } from \"@chakra-ui/react\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [_id, setId] = useState(\"\");\r\n  const [informacao, setInformacao] = useState([]);\r\n  const [questionsList, setQuestionsList] = useState([]);\r\n  const [questionsLists, setQuestionsLists] = useState([]);\r\nconsole.log(questionsLists)\r\nconst [extractedQuestions,setExtractedQuestions] = useState()\r\nconsole.log(setExtractedQuestions)\r\n\r\n  useEffect(() => {\r\n    setQuestionsLists(extractedQuestions); // Update state\r\n}, [informacao, _id]);\r\n\r\n  async function obterInformacaoPorId(id) {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      setInformacao(response.data);\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  }\r\n\r\n  const handleIdChange = (event) => {\r\n    setId(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (informacao.length > 0) {\r\n      const extractedQuestions = informacao.find((info) => info._id === _id)\r\n        ?.selectedQuestions\r\n        ?.map((question) => (\r\n          <li key={question.id}>{question.pergunta}</li> // Key prop added here!\r\n        ));\r\n      setQuestionsList(extractedQuestions);\r\n    }\r\n  }, [informacao, _id]);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={_id}\r\n        onChange={handleIdChange}\r\n        placeholder=\"Insira o _id\"\r\n      />\r\n    \r\n      {questionsList.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {questionsList.map((post) => (\r\n            <div key={_id}  >\r\n             \r\n            <p>{post.questionsList}</p>\r\n              \r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\nconsole.log(selectedId)\r\nconsole.log(posts)\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     <div >\r\n   \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((_id,questions,perguntas) => (\r\n            <div key={_id}  >\r\n             \r\n            <p>{questions}</p>\r\n              <p >{perguntas }</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n         </div>\r\n         \r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}