{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\Formulario\\\\Forms - Copia\\\\frontForms\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//import { Box, HStack, Input } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [_id, setId] = useState(\"\");\n  const [perguntas, setPerguntas] = useState([]); // Use 'perguntas' for clarity\n  const [loading, setLoading] = useState(false); // Track loading state\n  console.log(perguntas);\n  useEffect(() => {\n    const fetchPerguntas = async () => {\n      setLoading(true); // Set loading to true\n      try {\n        const response = await axios.get(`http://localhost:8005/perguntas/${_id}`);\n        setPerguntas(response.data);\n      } catch (error) {\n        // Handle errors gracefully\n        console.error(\"Error fetching perguntas:\", error);\n      } finally {\n        setLoading(false); // Set loading to false\n      }\n    };\n    if (_id) {\n      fetchPerguntas();\n    }\n  }, [_id]);\n  const handleIdChange = event => {\n    setId(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: _id,\n      onChange: handleIdChange,\n      placeholder: \"Insira o _id\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Carregando perguntas...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : perguntas.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: perguntas.map(pergunta => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: pergunta.pergunta\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)\n      }, pergunta._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Nenhuma pergunta encontrada.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4zsIJyb8q04FF4EaFER2bDU681I=\");\n_c = App;\nexport default App;\n\n/*import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n\r\nconst [_id, setId] = useState(\"\");\r\nconst [informacao, setInformacao] = useState([]);\r\nconsole.log(informacao)\r\n\r\nuseEffect(() => {\r\n  if (_id) {\r\n    obterInformacaoPorId(_id);\r\n  }\r\n}, [_id]);\r\n\r\nasync function obterInformacaoPorId(id) {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n    setInformacao(response.data);\r\n  } catch (error) {\r\n    // Tratar erros\r\n  }\r\n}\r\n\r\nconst handleIdChange = (event) => {\r\n  setId(event.target.value);\r\n};\r\n\r\n  \r\n  return (\r\n    <div>\r\n    \r\n         <div>\r\n      <input\r\n        type=\"text\"\r\n        value={_id}\r\n        onChange={handleIdChange}\r\n        placeholder=\"Insira o _id\"\r\n      />\r\n      {informacao.map((info) => (\r\n        <div key={info._id}>\r\n       \r\n         <h3>{info.perguntaId}</h3>\r\n       \r\n        </div>\r\n      ))}\r\n    </div>\r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\n\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\nconsole.log(selectedId)\r\nconsole.log(posts)\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     <div >\r\n   \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((_id,questions,perguntas) => (\r\n            <div key={_id}  >\r\n             \r\n            <p>{questions}</p>\r\n              <p >{perguntas }</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n         </div>\r\n         \r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","_id","setId","perguntas","setPerguntas","loading","setLoading","console","log","fetchPerguntas","response","get","data","error","handleIdChange","event","target","value","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","length","map","pergunta","_c","$RefreshReg$"],"sources":["C:/Github/Formulario/Forms - Copia/frontForms/src/App.js"],"sourcesContent":["//import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [_id, setId] = useState(\"\");\r\n  const [perguntas, setPerguntas] = useState([]); // Use 'perguntas' for clarity\r\n  const [loading, setLoading] = useState(false); // Track loading state\r\nconsole.log(perguntas)\r\n  useEffect(() => {\r\n    const fetchPerguntas = async () => {\r\n      setLoading(true); // Set loading to true\r\n      try {\r\n        const response = await axios.get(`http://localhost:8005/perguntas/${_id}`);\r\n        setPerguntas(response.data);\r\n      } catch (error) {\r\n        // Handle errors gracefully\r\n        console.error(\"Error fetching perguntas:\", error);\r\n      } finally {\r\n        setLoading(false); // Set loading to false\r\n      }\r\n    };\r\n\r\n    if (_id) {\r\n      fetchPerguntas();\r\n    }\r\n  }, [_id]);\r\n\r\n  const handleIdChange = (event) => {\r\n    setId(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={_id}\r\n        onChange={handleIdChange}\r\n        placeholder=\"Insira o _id\"\r\n      />\r\n      {loading ? (\r\n        <p>Carregando perguntas...</p>\r\n      ) : perguntas.length > 0 ? (\r\n      \r\n        <ul>\r\n          {perguntas.map((pergunta) => (\r\n            <li key={pergunta._id}>\r\n              {/* Choose the properties you want to display */}\r\n              {/* Assuming perguntas has a 'pergunta' property for the question text */}\r\n              <p>{pergunta.pergunta}</p>\r\n              {/* And other properties as needed */}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>Nenhuma pergunta encontrada.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n\r\nconst [_id, setId] = useState(\"\");\r\nconst [informacao, setInformacao] = useState([]);\r\nconsole.log(informacao)\r\n\r\nuseEffect(() => {\r\n  if (_id) {\r\n    obterInformacaoPorId(_id);\r\n  }\r\n}, [_id]);\r\n\r\nasync function obterInformacaoPorId(id) {\r\n  try {\r\n    const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n    setInformacao(response.data);\r\n  } catch (error) {\r\n    // Tratar erros\r\n  }\r\n}\r\n\r\nconst handleIdChange = (event) => {\r\n  setId(event.target.value);\r\n};\r\n\r\n  \r\n  return (\r\n    <div>\r\n    \r\n         <div>\r\n      <input\r\n        type=\"text\"\r\n        value={_id}\r\n        onChange={handleIdChange}\r\n        placeholder=\"Insira o _id\"\r\n      />\r\n      {informacao.map((info) => (\r\n        <div key={info._id}>\r\n       \r\n         <h3>{info.perguntaId}</h3>\r\n       \r\n        </div>\r\n      ))}\r\n    </div>\r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\nconsole.log(selectedId)\r\nconsole.log(posts)\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     <div >\r\n   \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((_id,questions,perguntas) => (\r\n            <div key={_id}  >\r\n             \r\n            <p>{questions}</p>\r\n              <p >{perguntas }</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n         </div>\r\n         \r\n    </div>\r\n \r\n)\r\n}\r\n\r\nexport default App;*/\r\n\r\n\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACjC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACjDY,OAAO,CAACC,GAAG,CAACL,SAAS,CAAC;EACpBT,SAAS,CAAC,MAAM;IACd,MAAMe,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjCH,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB,IAAI;QACF,MAAMI,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAE,mCAAkCV,GAAI,EAAC,CAAC;QAC1EG,YAAY,CAACM,QAAQ,CAACE,IAAI,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAN,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,CAAC,SAAS;QACRP,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAED,IAAIL,GAAG,EAAE;MACPQ,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAET,MAAMa,cAAc,GAAIC,KAAK,IAAK;IAChCb,KAAK,CAACa,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC3B,CAAC;EAED,oBACEnB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MACEqB,IAAI,EAAC,MAAM;MACXF,KAAK,EAAEhB,GAAI;MACXmB,QAAQ,EAAEN,cAAe;MACzBO,WAAW,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,EACDpB,OAAO,gBACNP,OAAA;MAAAoB,QAAA,EAAG;IAAuB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAC5BtB,SAAS,CAACuB,MAAM,GAAG,CAAC,gBAEtB5B,OAAA;MAAAoB,QAAA,EACGf,SAAS,CAACwB,GAAG,CAAEC,QAAQ,iBACtB9B,OAAA;QAAAoB,QAAA,eAGEpB,OAAA;UAAAoB,QAAA,EAAIU,QAAQ,CAACA;QAAQ;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC,GAHnBG,QAAQ,CAAC3B,GAAG;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKjB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,gBAEL3B,OAAA;MAAAoB,QAAA,EAAG;IAA4B;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACnC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACzB,EAAA,CAvDQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAyDZ,eAAeA,GAAG;;AAMlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1EA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}