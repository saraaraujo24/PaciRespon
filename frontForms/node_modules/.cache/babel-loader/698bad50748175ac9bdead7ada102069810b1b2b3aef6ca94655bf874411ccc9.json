{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\Formulario\\\\Forms - Copia\\\\frontForms\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Box, HStack, Input, List, ListItem, Button } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [selectedId, setSelectedId] = useState(\"\");\n  const [answers, setAnswers] = useState([]); // State to store answers\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true);\n  const answersRefs = useRef([]);\n  console.log(answers);\n  useEffect(() => {\n    answersRefs.current = Array(posts.length).fill(null); // Initialize refs\n  }, [posts]);\n  useEffect(() => {\n    if (selectedId) {\n      fetchQuestions(selectedId);\n    }\n  }, [selectedId]);\n  const fetchQuestions = async id => {\n    try {\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\n      setPosts(questionList.flat());\n      setAnswers(Array(questionList.length).fill(\"\")); // Initialize answers with empty strings\n      //setIsSubmitDisabled(true); // Disable button until all answers are provided\n    } catch (error) {\n      // Handle errors here\n    }\n  };\n  const handleIdChange = event => {\n    setSelectedId(event.target.value);\n  };\n  const handleAnswerChange = (index, answer) => {\n    setAnswers(prevAnswers => {\n      return [...prevAnswers.slice(0, index), answer, ...prevAnswers.slice(index + 1)];\n    });\n    setIsSubmitDisabled(answers.some(a => !a.trim())); // Disable button if any answer is empty\n  };\n\n  /*const handleSubmit = async () => {\r\n    try {\r\n      const response = await axios.post(`http://localhost:8005/response`, { answers,posts});\r\n      console.log(\"Response from server:\", response);\r\n     \r\n      // Handle success response (e.g., display a confirmation message)\r\n    } catch (error) {\r\n      // Handle errors here\r\n    }\r\n  };*/\n  const handleSubmit = async () => {\n    try {\n      const data = {\n        responses: posts.map((question, index) => ({\n          question,\n          answer: answers[index]\n        }))\n      };\n      const response = await axios.post('http://localhost:8005/response', data);\n      if (response.status === 200) {\n        // Handle success, e.g., clear form, show confirmation message\n        setPosts([]);\n        setAnswers([]);\n        setIsSubmitDisabled(true);\n        // ...\n      } else {\n        // Handle errors\n        console.error('Error submitting data:', response.data);\n        // ...\n      }\n    } catch (error) {\n      // Handle network errors\n      console.error('Network error:', error);\n      // ...\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HStack, {\n      spacing: 8,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        w: \"100%\",\n        ml: \"5%\",\n        mt: \"5%\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          className: \"wrap-input\",\n          id: \"cpfInput\",\n          value: selectedId,\n          onChange: handleIdChange,\n          placeholder: \"Enter _id to fetch data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), posts.length > 0 ? /*#__PURE__*/_jsxDEV(List, {\n      spacing: 3,\n      children: [posts.map((question, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [question, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: answersRefs.current[index] // Attach ref for uncontrolled input\n          ,\n          value: answers[index],\n          onChange: e => handleAnswerChange(index, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        isDisabled: isSubmitDisabled,\n        onClick: handleSubmit,\n        children: \"Enviar Todas as Respostas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      textAlign: \"center\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mSclMLfGlIj8ecONHk6ZSAf2/rg=\");\n_c = App;\nexport default App;\n\n/*import { Box, HStack, Input, List, ListItem,Button  } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useRef } from \"react\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n const [answers, setAnswers] = useState([]); // State to store answers\r\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true);\r\n  const answersRefs = useRef([]);\r\nconsole.log(answers)\r\n\r\n  useEffect(() => {\r\n    answersRefs.current = Array(posts.length).fill(null); // Initialize refs\r\n  }, [posts]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      fetchQuestions(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const fetchQuestions = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => \r\n        post.selectedQuestions.map((question) => question.pergunta));\r\n      setPosts(questionList.flat());\r\n      setAnswers(Array(questionList.length).fill(\"\")); // Initialize answers with empty strings\r\n      //setIsSubmitDisabled(true); // Disable button until all answers are provided\r\n    } catch (error) {\r\n      // Handle errors here\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n  };\r\n\r\n  const handleAnswerChange = (index, answer) => {\r\n    setAnswers((prevAnswers) => {\r\n      return [...prevAnswers.slice(0, index), answer, ...prevAnswers.slice(index + 1)];\r\n    });\r\n    setIsSubmitDisabled(answers.some((a) => !a.trim())); // Disable button if any answer is empty\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const response = await axios.post(`http://localhost:8005/response`, { answers});\r\n      console.log(\"Response from server:\", response);\r\n     \r\n      // Handle success response (e.g., display a confirmation message)\r\n    } catch (error) {\r\n      // Handle errors here\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <HStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedId}\r\n            onChange={handleIdChange}\r\n            placeholder=\"Enter _id to fetch data\"\r\n          />\r\n        </Box>\r\n      </HStack>\r\n\r\n      {posts.length > 0 ? (\r\n        <List spacing={3}>\r\n          {posts.map((question, index) => (\r\n            <ListItem key={index}>\r\n              {question}<br></br>\r\n              <Input\r\n                type={answersRefs.current[index]} // Attach ref for uncontrolled input\r\n                value={answers[index]}\r\n                onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n          <Button isDisabled={isSubmitDisabled} onClick={handleSubmit}>\r\n            Enviar Todas as Respostas\r\n          </Button>\r\n        </List>\r\n      ) : (\r\n        <Box textAlign=\"center\">Loading...</Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;*/\n\n/*import { Box, HStack, Input, List, ListItem } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  const [resposta, setResposta] = useState('');\r\n   console.log(resposta)\r\n  \r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      fetchQuestions(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const fetchQuestions = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList.flat()); // Flatten nested arrays if necessary\r\n    } catch (error) {\r\n      // Handle errors here (e.g., display an error message)\r\n      console.error(\"Error fetching questions:\", error);\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n  };\r\n\r\n\r\n\r\n\r\n  async function handleSubmit() {\r\n \r\n    const response = resposta\r\n  try{\r\n    await axios.post('http://localhost:8005/response', {  \r\n      resposta:response,\r\n    });\r\n      console.log('Respostas salvas com sucesso!');\r\n \r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <HStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedId}\r\n            onChange={handleIdChange}\r\n            placeholder=\"Enter _id to fetch data\"\r\n          />\r\n        </Box>\r\n      </HStack>\r\n\r\n      {posts.length > 0 ? (\r\n        <List spacing={3}>\r\n          {posts.map((question, index) => (\r\n            <ListItem key={index}>{question}<br></br>\r\n             <input\r\n                className=\"space\"\r\n                type=\"text\"\r\n                placeholder=\"Digite sua resposta...\"\r\n                onChange={e =>setResposta(e.target.value)}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n          <button onClick={handleSubmit} >Enviar</button>\r\n        </List>\r\n      ) : (\r\n      \r\n        <Box textAlign=\"center\">Loading...</Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Box","HStack","Input","List","ListItem","Button","React","useEffect","useState","axios","useRef","jsxDEV","_jsxDEV","App","_s","posts","setPosts","selectedId","setSelectedId","answers","setAnswers","isSubmitDisabled","setIsSubmitDisabled","answersRefs","console","log","current","Array","length","fill","fetchQuestions","id","response","get","questionList","data","map","post","selectedQuestions","question","pergunta","flat","error","handleIdChange","event","target","value","handleAnswerChange","index","answer","prevAnswers","slice","some","a","trim","handleSubmit","responses","status","children","spacing","w","ml","mt","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","type","e","isDisabled","onClick","textAlign","_c","$RefreshReg$"],"sources":["C:/Github/Formulario/Forms - Copia/frontForms/src/App.js"],"sourcesContent":["import { Box, HStack, Input, List, ListItem,Button  } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useRef } from \"react\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n const [answers, setAnswers] = useState([]); // State to store answers\r\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true);\r\n  const answersRefs = useRef([]);\r\nconsole.log(answers)\r\n\r\n  useEffect(() => {\r\n    answersRefs.current = Array(posts.length).fill(null); // Initialize refs\r\n  }, [posts]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      fetchQuestions(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const fetchQuestions = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => \r\n        post.selectedQuestions.map((question) => question.pergunta));\r\n      setPosts(questionList.flat());\r\n      setAnswers(Array(questionList.length).fill(\"\")); // Initialize answers with empty strings\r\n      //setIsSubmitDisabled(true); // Disable button until all answers are provided\r\n    } catch (error) {\r\n      // Handle errors here\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n  };\r\n\r\n  const handleAnswerChange = (index, answer) => {\r\n    setAnswers((prevAnswers) => {\r\n      return [...prevAnswers.slice(0, index), answer, ...prevAnswers.slice(index + 1)];\r\n    });\r\n    setIsSubmitDisabled(answers.some((a) => !a.trim())); // Disable button if any answer is empty\r\n  };\r\n\r\n  /*const handleSubmit = async () => {\r\n    try {\r\n      const response = await axios.post(`http://localhost:8005/response`, { answers,posts});\r\n      console.log(\"Response from server:\", response);\r\n     \r\n      // Handle success response (e.g., display a confirmation message)\r\n    } catch (error) {\r\n      // Handle errors here\r\n    }\r\n  };*/\r\nconst handleSubmit = async () => {\r\n    try {\r\n      const data = {\r\n        responses: posts.map((question, index) => ({\r\n          question,\r\n          answer: answers[index]\r\n        }))\r\n      };\r\n      const response = await axios.post('http://localhost:8005/response', data);\r\n\r\n      if (response.status === 200) {\r\n        // Handle success, e.g., clear form, show confirmation message\r\n        setPosts([]);\r\n        setAnswers([]);\r\n        setIsSubmitDisabled(true);\r\n        // ...\r\n      } else {\r\n        // Handle errors\r\n        console.error('Error submitting data:', response.data);\r\n        // ...\r\n      }\r\n    } catch (error) {\r\n      // Handle network errors\r\n      console.error('Network error:', error);\r\n      // ...\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <HStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedId}\r\n            onChange={handleIdChange}\r\n            placeholder=\"Enter _id to fetch data\"\r\n          />\r\n        </Box>\r\n      </HStack>\r\n\r\n      {posts.length > 0 ? (\r\n        <List spacing={3}>\r\n          {posts.map((question, index) => (\r\n            <ListItem key={index}>\r\n              {question}<br></br>\r\n              <Input\r\n                type={answersRefs.current[index]} // Attach ref for uncontrolled input\r\n                value={answers[index]}\r\n                onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n          <Button isDisabled={isSubmitDisabled} onClick={handleSubmit}>\r\n            Enviar Todas as Respostas\r\n          </Button>\r\n        </List>\r\n      ) : (\r\n        <Box textAlign=\"center\">Loading...</Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { Box, HStack, Input, List, ListItem,Button  } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useRef } from \"react\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n const [answers, setAnswers] = useState([]); // State to store answers\r\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true);\r\n  const answersRefs = useRef([]);\r\nconsole.log(answers)\r\n\r\n  useEffect(() => {\r\n    answersRefs.current = Array(posts.length).fill(null); // Initialize refs\r\n  }, [posts]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      fetchQuestions(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const fetchQuestions = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => \r\n        post.selectedQuestions.map((question) => question.pergunta));\r\n      setPosts(questionList.flat());\r\n      setAnswers(Array(questionList.length).fill(\"\")); // Initialize answers with empty strings\r\n      //setIsSubmitDisabled(true); // Disable button until all answers are provided\r\n    } catch (error) {\r\n      // Handle errors here\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n  };\r\n\r\n  const handleAnswerChange = (index, answer) => {\r\n    setAnswers((prevAnswers) => {\r\n      return [...prevAnswers.slice(0, index), answer, ...prevAnswers.slice(index + 1)];\r\n    });\r\n    setIsSubmitDisabled(answers.some((a) => !a.trim())); // Disable button if any answer is empty\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const response = await axios.post(`http://localhost:8005/response`, { answers});\r\n      console.log(\"Response from server:\", response);\r\n     \r\n      // Handle success response (e.g., display a confirmation message)\r\n    } catch (error) {\r\n      // Handle errors here\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <HStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedId}\r\n            onChange={handleIdChange}\r\n            placeholder=\"Enter _id to fetch data\"\r\n          />\r\n        </Box>\r\n      </HStack>\r\n\r\n      {posts.length > 0 ? (\r\n        <List spacing={3}>\r\n          {posts.map((question, index) => (\r\n            <ListItem key={index}>\r\n              {question}<br></br>\r\n              <Input\r\n                type={answersRefs.current[index]} // Attach ref for uncontrolled input\r\n                value={answers[index]}\r\n                onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n          <Button isDisabled={isSubmitDisabled} onClick={handleSubmit}>\r\n            Enviar Todas as Respostas\r\n          </Button>\r\n        </List>\r\n      ) : (\r\n        <Box textAlign=\"center\">Loading...</Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import { Box, HStack, Input, List, ListItem } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  const [resposta, setResposta] = useState('');\r\n   console.log(resposta)\r\n  \r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      fetchQuestions(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const fetchQuestions = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList.flat()); // Flatten nested arrays if necessary\r\n    } catch (error) {\r\n      // Handle errors here (e.g., display an error message)\r\n      console.error(\"Error fetching questions:\", error);\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n  };\r\n\r\n\r\n\r\n\r\n  async function handleSubmit() {\r\n \r\n    const response = resposta\r\n  try{\r\n    await axios.post('http://localhost:8005/response', {  \r\n      resposta:response,\r\n    });\r\n      console.log('Respostas salvas com sucesso!');\r\n \r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <HStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedId}\r\n            onChange={handleIdChange}\r\n            placeholder=\"Enter _id to fetch data\"\r\n          />\r\n        </Box>\r\n      </HStack>\r\n\r\n      {posts.length > 0 ? (\r\n        <List spacing={3}>\r\n          {posts.map((question, index) => (\r\n            <ListItem key={index}>{question}<br></br>\r\n             <input\r\n                className=\"space\"\r\n                type=\"text\"\r\n                placeholder=\"Digite sua resposta...\"\r\n                onChange={e =>setResposta(e.target.value)}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n          <button onClick={handleSubmit} >Enviar</button>\r\n        </List>\r\n      ) : (\r\n      \r\n        <Box textAlign=\"center\">Loading...</Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;*/\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}