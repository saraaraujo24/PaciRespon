{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\Formulario\\\\Forms - Copia\\\\frontForms\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Box, HStack, Input } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [selectedCpf, setSelectedCpf] = useState('');\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      if (selectedCpf.length === 14) {\n        const response = await axios.get(`http://localhost:8005/questions/${selectedCpf}`);\n        setPosts(response.data.map(questionArray => questionArray[0]));\n      }\n    };\n    fetchQuestions();\n  }, [selectedCpf]);\n  const handleCpfChange = event => {\n    setSelectedCpf(event.target.value.replace(/\\D/g, ''));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter CPF\",\n      value: selectedCpf,\n      onChange: handleCpfChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), posts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"perguntas\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Perguntas encontradas para o CPF \", selectedCpf, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), posts.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Pergunta \", index + 1, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"kXtyCDZFTXUn20pJ22EjSA5QHwE=\");\n_c = App;\nexport default App;\n\n/*function App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  console.log(posts)\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/questions/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div className=\"perguntas\">\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((question, index) => (\r\n            <div className=\"perguntas\" key={index}  >\r\n              <h4>Pergunta {index + 1}:</h4>\r\n              <p>{question}</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n     \r\n    </div>\r\n  );\r\n}\r\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Box","HStack","Input","React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","posts","setPosts","selectedCpf","setSelectedCpf","fetchQuestions","length","response","get","data","map","questionArray","handleCpfChange","event","target","value","replace","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","className","question","index","_c","$RefreshReg$"],"sources":["C:/Github/Formulario/Forms - Copia/frontForms/src/App.js"],"sourcesContent":["import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedCpf, setSelectedCpf] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      if (selectedCpf.length === 14) {\r\n        const response = await axios.get(`http://localhost:8005/questions/${selectedCpf}`);\r\n        setPosts(response.data.map(questionArray => questionArray[0]));\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, [selectedCpf]);\r\n\r\n  const handleCpfChange = (event) => {\r\n    setSelectedCpf(event.target.value.replace(/\\D/g, ''));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter CPF\"\r\n        value={selectedCpf}\r\n        onChange={handleCpfChange}\r\n      />\r\n      {posts.length > 0 && (\r\n        <div className=\"perguntas\">\r\n          <h2>Perguntas encontradas para o CPF {selectedCpf}:</h2>\r\n          {posts.map((question, index) => (\r\n            <div key={index}>\r\n              <h4>Pergunta {index + 1}:</h4>\r\n              <p>{question}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n/*function App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  console.log(posts)\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/questions/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div className=\"perguntas\">\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((question, index) => (\r\n            <div className=\"perguntas\" key={index}  >\r\n              <h4>Pergunta {index + 1}:</h4>\r\n              <p>{question}</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n     \r\n    </div>\r\n  );\r\n}\r\nexport default App;*/\r\n"],"mappings":";;AAAA,SAASA,GAAG,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACrD,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAIF,WAAW,CAACG,MAAM,KAAK,EAAE,EAAE;QAC7B,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAE,mCAAkCL,WAAY,EAAC,CAAC;QAClFD,QAAQ,CAACK,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,aAAa,IAAIA,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;MAChE;IACF,CAAC;IAEDN,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACF,WAAW,CAAC,CAAC;EAEjB,MAAMS,eAAe,GAAIC,KAAK,IAAK;IACjCT,cAAc,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;EACvD,CAAC;EAED,oBACElB,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MACEoB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,WAAW;MACvBJ,KAAK,EAAEZ,WAAY;MACnBiB,QAAQ,EAAER;IAAgB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,EACDvB,KAAK,CAACK,MAAM,GAAG,CAAC,iBACfR,OAAA;MAAK2B,SAAS,EAAC,WAAW;MAAAR,QAAA,gBACxBnB,OAAA;QAAAmB,QAAA,GAAI,mCAAiC,EAACd,WAAW,EAAC,GAAC;MAAA;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACvDvB,KAAK,CAACS,GAAG,CAAC,CAACgB,QAAQ,EAAEC,KAAK,kBACzB7B,OAAA;QAAAmB,QAAA,gBACEnB,OAAA;UAAAmB,QAAA,GAAI,WAAS,EAACU,KAAK,GAAG,CAAC,EAAC,GAAC;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9B1B,OAAA;UAAAmB,QAAA,EAAIS;QAAQ;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFTG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxB,EAAA,CAxCID,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA0CT,eAAeA,GAAG;;AAIlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1DA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}