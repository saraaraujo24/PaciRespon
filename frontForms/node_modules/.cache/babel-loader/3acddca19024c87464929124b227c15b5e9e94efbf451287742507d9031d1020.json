{"ast":null,"code":"var _jsxFileName = \"C:\\\\Github\\\\Formulario\\\\Forms - Copia\\\\frontForms\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  console.log(posts)\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     <div >\r\n   \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((question,_id) => (\r\n            <div key={_id}  >\r\n             \r\n              <p >{question }</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n         </div>\r\n    </div>\r\n  );\r\n}\r\nexport default App;*/\nimport { Box, VStack, Input, Text, HStack, Button, Textarea } from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [selectedId, setSelectedId] = useState(\"\");\n  const [currentQuestion, setCurrentQuestion] = useState(null); // Track current question\n  const [answer, setAnswer] = useState(\"\"); // Store user's answer\n  const [showAnswerSection, setShowAnswerSection] = useState(false); // Control answer section visibility\n\n  useEffect(() => {\n    if (selectedId) {\n      getUserById(selectedId);\n    }\n  }, [selectedId]);\n  const getUserById = async id => {\n    try {\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question));\n      setPosts(questionList);\n      setCurrentQuestion(questionList[0]); // Start with the first question\n      setShowAnswerSection(true); // Initially show answer section\n    } catch (error) {\n      // Handle errors\n    }\n  };\n  const handleIdChange = event => {\n    setSelectedId(event.target.value);\n    setPosts([]); // Clear previous questions\n    setCurrentQuestion(null);\n    setAnswer(\"\");\n    setShowAnswerSection(false); // Hide answer section until questions fetched\n  };\n  const handleSubmitAnswer = async () => {\n    try {\n      // Replace with your actual answer submission logic\n      // Here's an example using a mock API endpoint:\n      await axios.post(`http://localhost:8005/perguntas/${currentQuestion._id}/answer`, {\n        answer\n      });\n      const remainingQuestions = posts.filter(q => q !== currentQuestion);\n      setPosts(remainingQuestions);\n      setCurrentQuestion(remainingQuestions[0]); // Move to next question\n      setAnswer(\"\");\n\n      // Optionally, display a success message or provide other feedback\n    } catch (error) {\n      // Handle errors\n    }\n  };\n  const handleNextQuestion = () => {\n    if (posts.length > 0) {\n      const remainingQuestions = posts.filter(q => q !== currentQuestion);\n      setPosts(remainingQuestions);\n      setCurrentQuestion(remainingQuestions[0]); // Move to next question\n      setAnswer(\"\"); // Clear answer input for the new question\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(VStack, {\n      spacing: 8,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        w: \"100%\",\n        ml: \"5%\",\n        mt: \"5%\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          className: \"wrap-input\",\n          id: \"cpfInput\",\n          value: selectedId,\n          onChange: handleIdChange,\n          placeholder: \"Enter _id to fetch data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), currentQuestion &&\n      /*#__PURE__*/\n      // Render only when a question is available\n      _jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          m: \"5\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            as: \"h2\",\n            children: `Pergunta ${posts.indexOf(currentQuestion) + 1}:`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            as: \"p\",\n            children: currentQuestion.pergunta\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), showAnswerSection &&\n        /*#__PURE__*/\n        // Show answer section if necessary\n        _jsxDEV(VStack, {\n          spacing: 4,\n          mt: 4,\n          children: [/*#__PURE__*/_jsxDEV(Textarea, {\n            value: answer,\n            onChange: e => setAnswer(e.target.value),\n            placeholder: \"Insira sua resposta aqui\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(HStack, {\n            width: \"100%\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleSubmitAnswer,\n              children: \"Responder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this), posts.length > 1 &&\n            /*#__PURE__*/\n            // Only show \"PrÃ³xima\" button if more questions exist\n            _jsxDEV(Button, {\n              onClick: handleNextQuestion,\n              children: \"Pr\\xF3xima\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      mt: 4,\n      children: [\"Quest\\xE3o \", posts.indexOf(currentQuestion) + 1, \" de \", posts.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), posts.length > 1 && /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      mt: 4,\n      children: [\"Pr\\xF3xima pergunta: \", posts[1].pergunta.slice(0, 50), \"...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(VStack, {\n      spacing: 4,\n      children: posts.map((question, index) => /*#__PURE__*/_jsxDEV(Box, {\n        border: index === posts.indexOf(currentQuestion) ? '2px solid blue' : '1px solid gray',\n        p: 4,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          as: \"h4\",\n          children: `Pergunta ${index + 1}:`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          children: question.pergunta\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 7\n        }, this)]\n      }, question._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1d7uXw8gfXg/ErVVRnGADZxP6dE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Box","VStack","Input","Text","HStack","Button","Textarea","React","useEffect","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","posts","setPosts","selectedId","setSelectedId","currentQuestion","setCurrentQuestion","answer","setAnswer","showAnswerSection","setShowAnswerSection","getUserById","id","response","get","questionList","data","map","post","selectedQuestions","question","error","handleIdChange","event","target","value","handleSubmitAnswer","_id","remainingQuestions","filter","q","handleNextQuestion","length","children","spacing","w","ml","mt","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","m","as","indexOf","pergunta","e","width","justifyContent","onClick","slice","index","border","p","_c","$RefreshReg$"],"sources":["C:/Github/Formulario/Forms - Copia/frontForms/src/App.js"],"sourcesContent":["/*import { Box, HStack, Input } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  console.log(posts)\r\n\r\n  useEffect(() => {\r\n   \r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map(post => post.selectedQuestions.map(question => question.pergunta));\r\n      setPosts(questionList); // Now posts holds an array of question arrays\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    getUserById(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <HStack spacing={8}>\r\n          <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n            <Input\r\n              className=\"wrap-input\"\r\n              id=\"cpfInput\"\r\n              value={selectedId}\r\n              onChange={handleIdChange}\r\n              placeholder=\"Enter _id to fetch data\"\r\n            />\r\n          </Box>\r\n          \r\n        </HStack>\r\n     <div >\r\n   \r\n        {posts.length > 0 && ( // Render questions only if available\r\n        <div >\r\n          <h2>Perguntas encontradas para o CPF :</h2>\r\n          {posts.map((question,_id) => (\r\n            <div key={_id}  >\r\n             \r\n              <p >{question }</p>\r\n            </div>\r\n          ))}\r\n           </div>\r\n      )}\r\n\r\n         </div>\r\n    </div>\r\n  );\r\n}\r\nexport default App;*/\r\nimport { Box, VStack, Input, Text, HStack, Button,Textarea } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  const [currentQuestion, setCurrentQuestion] = useState(null); // Track current question\r\n  const [answer, setAnswer] = useState(\"\"); // Store user's answer\r\n  const [showAnswerSection, setShowAnswerSection] = useState(false); // Control answer section visibility\r\n\r\n  useEffect(() => {\r\n    if (selectedId) {\r\n      getUserById(selectedId);\r\n    }\r\n  }, [selectedId]);\r\n\r\n  const getUserById = async (id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:8005/perguntas/${id}`);\r\n      const questionList = response.data.map((post) =>\r\n        post.selectedQuestions.map((question) => question)\r\n      );\r\n      setPosts(questionList);\r\n      setCurrentQuestion(questionList[0]); // Start with the first question\r\n      setShowAnswerSection(true); // Initially show answer section\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n  const handleIdChange = (event) => {\r\n    setSelectedId(event.target.value);\r\n    setPosts([]); // Clear previous questions\r\n    setCurrentQuestion(null);\r\n    setAnswer(\"\");\r\n    setShowAnswerSection(false); // Hide answer section until questions fetched\r\n  };\r\n\r\n  const handleSubmitAnswer = async () => {\r\n    try {\r\n      // Replace with your actual answer submission logic\r\n      // Here's an example using a mock API endpoint:\r\n      await axios.post(`http://localhost:8005/perguntas/${currentQuestion._id}/answer`, {\r\n        answer,\r\n      });\r\n\r\n      const remainingQuestions = posts.filter((q) => q !== currentQuestion);\r\n      setPosts(remainingQuestions);\r\n      setCurrentQuestion(remainingQuestions[0]); // Move to next question\r\n      setAnswer(\"\");\r\n\r\n      // Optionally, display a success message or provide other feedback\r\n    } catch (error) {\r\n      // Handle errors\r\n    }\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    if (posts.length > 0) {\r\n      const remainingQuestions = posts.filter((q) => q !== currentQuestion);\r\n      setPosts(remainingQuestions);\r\n      setCurrentQuestion(remainingQuestions[0]); // Move to next question\r\n      setAnswer(\"\"); // Clear answer input for the new question\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <VStack spacing={8}>\r\n        <Box w=\"100%\" ml=\"5%\" mt=\"5%\">\r\n          <Input\r\n            className=\"wrap-input\"\r\n            id=\"cpfInput\"\r\n            value={selectedId}\r\n            onChange={handleIdChange}\r\n            placeholder=\"Enter _id to fetch data\"\r\n          />\r\n        </Box>\r\n\r\n        {currentQuestion && ( // Render only when a question is available\r\n          <>\r\n            <Box m=\"5\">\r\n              <Text as=\"h2\">{`Pergunta ${posts.indexOf(currentQuestion) + 1}:`}</Text>\r\n              <Text as=\"p\">{currentQuestion.pergunta}</Text>\r\n            </Box>\r\n\r\n            {showAnswerSection && ( // Show answer section if necessary\r\n              <VStack spacing={4} mt={4}>\r\n                <Textarea\r\n                  value={answer}\r\n                  onChange={(e) => setAnswer(e.target.value)}\r\n                  placeholder=\"Insira sua resposta aqui\"\r\n                />\r\n                <HStack width=\"100%\" justifyContent=\"space-between\">\r\n                  <Button onClick={handleSubmitAnswer}>Responder</Button>\r\n                  {posts.length > 1 && ( // Only show \"PrÃ³xima\" button if more questions exist\r\n                    <Button onClick={handleNextQuestion}>PrÃ³xima</Button>\r\n                  )}\r\n                </HStack>\r\n              </VStack>\r\n            )}\r\n          </>\r\n        )}\r\n      </VStack>\r\n      <Text as=\"p\" mt={4}>QuestÃ£o {posts.indexOf(currentQuestion) + 1} de {posts.length}</Text>\r\n      {posts.length > 1 && (\r\n  <Text as=\"p\" mt={4}>PrÃ³xima pergunta: {posts[1].pergunta.slice(0, 50)}...</Text>\r\n)}\r\n<VStack spacing={4}>\r\n  {posts.map((question, index) => (\r\n    <Box key={question._id} border={index === posts.indexOf(currentQuestion) ? '2px solid blue' : '1px solid gray'} p={4}>\r\n      <Text as=\"h4\">{`Pergunta ${index + 1}:`}</Text>\r\n      <Text as=\"p\">{question.pergunta}</Text>\r\n    </Box>\r\n  ))}\r\n</VStack>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}